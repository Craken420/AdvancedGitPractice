Download:  https://git-scm.com/download/win

1.-Getting Started:
1.2-First-Time Git Setup:

	git config --list --show-origin                  : Configuraciones y origen 
	git config --global user.name "Nombre"           : Identidad
	git config --global user.email user@example.com  : email
	git config --global core.editor "editorName"     : Editor de texto
		emacs, "'C:\Program Files\Sublime Text 3\sublime_text.exe' --wait"

	git config --global init.defaultBranch main      : Nombre de la rama default
	git config --list, git config user.name		 : Configuraciones

1.7-Getting Help:

	Update-Help	: Actualizar Ayuda 
	git help config	: git help <verb>, example 
	git add -h	: git <verb> --help
	man git-config	: man git-<verb>

2.-Git Basics:
2.1-Getting a Git Repository:
	
	git init				 : Iniciar git en repositorio
	git add *.c				 : Montar cambios por extension
	git add LICENSE 			 : Montar cambios por nombre
	git add . 				 : Montar todos los cambios
	git commit -m 'Initial project version'  : Confirmar (commit): 

	git clone https://github.com/li		 : Clonar: git clone URL,  example
	git clone https://github.com/li myli	 : Cambiar nombre del proyecto

2.2-Recording Changes to the Repository:
	git status	: Estado de archivos
	git status -s 	: Corto

	git add README	: Montar cambios
		
	Omitir archivos: cat .gitignore
		*.[oa]: terminacion .o|.a
		*~: terminan con tilde
		/node_modules/: Carpeta
				
	git diff 	   : Comparar
	git diff --staged  : Comparar con último commit
	git diff --cached  : Comparar con último commit

	git commit -m "Message"	   : Confirmar cambios
	git commit -a -m "Message" : Confirmar y Saltar rastreo

	
	Remover el rastreo:
		rm PROJECTS.md  : cmd borrar archivo
		git status	: Ver cambios no montados(unstaged)
		git rm PROJECTS.md
			Examples: git rm log/\*.log, git rm \*~
			Nota: Si ejecuto "add", forzar eliminación con: -f.

	git: git rm --cached README	: Mantener archivo local y quitar rastreo 

	git mv file_from file_to	: Renombrar un archivo en git: 
		this do this: mv README.md README, git rm README.md, git add README

2.3-Viewing the Commit History:
	git log			  : Ver
	git log -p -2		  : últimos -n(2, 3, ...): 
	git log --since=2.weeks	  : Rango 
	git log --stat		  : Archivos y lineas modificadas
	git log --pretty=oneline  : En linea
	git log --pretty=format:"%h - %an, %ar : %s"	: Formato
	   "a82a6d - Scott Chacon, 6 years ago : Change v"
		formatos:
			%H: Commit hash
			%h: Abbreviated commit hash
			%T: Tree hash
			%t: Abbreviated tree hash
			%P: Parent hashes
			%p: Abbreviated parent hashes
			%an: Author name:
			%ae: Author email
			%ad: Author date (format respects the --date=option)
			%ar: Author date, relative
			%cn: Committer name
			%ce: Committer email
			%cd: Committer date
			%cr: Committer date, relative
			%s: Subject
				
2.4-Undoing Things:
	git commit --amend -m "nuevo mensaje"	: Editar último
	git commit --amend			: Agregar cambios al último
	git reset HEAD CONTRIBUTING.md		: Desmontando cambios
	git checkout -- CONTRIBUTING.md 	: Desmodificar un arhivo commiteado
	git restore --staged CONTRIBUTING.md	: Igual a (reset), pero trabaja con montados
	git restore CONTRIBUTING.md		: Desmodificar un arhivo commiteado

2.5-Working with Remotes
	git remote -v 							: Saber el remoto
		//-> origin https://github.com/Craken420/AdvancedGit

	git remote add alias https://github.com/Cra/AdvancedGit2	: Agregar remoto
		git remote add <shortname> <url>: 
		now u can use it: git fetch alias
		
	git fetch <remote> 	    : Fetching and Pulling
	git push origin master	    : Enviar al remoto
	git remote show origin	    : Info remota especifica 
	git remote rename pb paul   : Renombrar
	git remote remove paul      : Borrar

2.6-Tagging:
	git tag || git tag -l "v1.8.5*"	  : Listing Your Tags

	git tag -a v1.4 -m "my version 1.4", git show v1.4	: Crear Annotated Tags
	git tag v1.4-lw, git show v1.4-lw 			: Crear  Lightweight Tags

	Tagging Later: git tag -a v1.2 9fceb02 //--> (ID Commit), git show v1.2
		
	git push origin v1.5	: Compartir
	git push origin --tags	: Compartir
	
	git tag -d v1.4-lw			: Boorar local
	git push origin :refs/tags/v1.4-lw	: Boorar remote 
		git push origin --delete <tagname>
	
	git checkout v2.0.0		  : Moverse
	git checkout -b version2 v2.0.0	  : crear rama

2.7-Git Aliases:
	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.ci commit
	git config --global alias.st status
	git config --global alias.unstage 'reset HEAD --'
		git unstage fileA = git reset HEAD -- fileA
	git config --global alias.last 'log -1 HEAD'
		git last
	git config --global alias.dtoplog 'reset --hard HEAD^'
	git config --global alias.visual '!(nameCommand: gitk)'	 : ejecutar comando externo

3- Git Branching:
	git branch testing	: Crear
	git checkout testing	: Moverse
	git checkout -b hotfix  : Crear y Moverse
	git merge hotfix	: Combinar en tu rama
	git branch -d hotfix	: Borrrar
	git mergetool		: Basic Merge Conflicts
	git branch		: Mostrar ramas
	git branch -v		: Ramas con commit
	git branch --merged	: Mostrar merges 
	git branch --no-merged	: Mostrar no merges 
	git branch --move oldname newname	: Cambiar nombre local
	git push --set-upstream origin newname	: Cambiar nombre remote
	git branch --all			: Listar remotes y local
	git push origin --delete oldname	: Eliminar rama remote con nombre erroneo
	git push origin serverfix		: Enviar una rama a un remote espesifico

	Tracking Branches: Rama acendente que parte de una rama remota (u = --set-upstream-to)
		
	  git checkout --track origin/serverfix	: Rama remota como local
	  git checkout -b sf origin/serverfix	: Rama remota como local diff nombre
	  git branch -u origin/serverfix		: Cargar rama remota en rama existente
	  git branch -vv				: Listar ramas asendentes
	  git fetch --all; git branch -vv 	: Actualizar commits remotos y locales (locales)ahead 3, (remoto)behind 1:
	
	git fetch (indicar remote)-> git merge (combinar)	: Extrae cambios del remoto indicado
	git pull						: Extrae cambios del remoto asendente por defecto
	git push origin --delete serverfix			: Borrar remotas
			
	
	Rebase: historial de commits lineal
		git checkout experiment
		git rebase master
		git checkout master
		git merge experiment
	git rebase --abort	: Abortar un rebase: 
	
	Interesting rebase:		
	  git rebase --onto master server client	: tomar master omitir server y pasarlo a cliente
	  git checkout master
	  git merge client
	  git rebase master server	
	  git checkout master
	  git merge server
	  git branch -d client
	  git branch -d server		
	  git push --force 				:  Reescribe el historial en el servidor

	The Perils of Rebasing
		Descargas cambios y haces 2 commits locales
		En el repo remoto crean una rama hacen un commit en master y la rama nueva para combinarlos en master
		Descargas cambios al local y fusionas localmente
		Remotamente regresan y rebasan el historial quitando el merge
		ERROR Caos historial: Descargas cambios y combinas localmente.
	SOLUCION: Rebasa cuando rebasas

		git rebase teamone/master
			Determine qué trabajo es exclusivo de nuestro salvado: (C2, C3, C4, C6, C7)
			Determinar cuáles no son merge commits (C2, C3, C4)
			Determine cuáles no se han reescrito en la rama de destino  ( C2 y C3, Ya que C4 es el mismo que C4')

OTHERS:
	/* Remote */
		git push origin -f: Sincronizar remote forzandolo

	/* Stash */
		git stash [push -m "Mensaje"]
		git stash list
		git stash show stash@{n} -v
		git stash apply [stash@{n}]
		git stash pop [stash@{n}]
		git stash drop [stash@{n}]

	/* Borra y descartar cambios */
		git reset --hard HEAD^: Borrar último commit
		git revert (commitName): Borrar un commit
		git reset --hard: Borrar cambios sin commit
		git reset HEAD: Descartar cambios commiteados
		git checkout -- . : Descartar cambios totalmente
		git clean -d -f : Descartar archivos nuevos

	/* Bajar cambios del repositorio remoto */
		git branch --set-upstream-to=origin/master master:
			Especificar rama remota - la rama local
		git pull: Fusionar remoto y local automáticamente:
		git fetch / git merge origin/master :
			Fusionar remoto y local manualmente y aplicar los cambios

	/* Editor de texto */
		git config --unset core.editor:
			Eliminar cualquier rastro de una configuración de un editor de texto
			ageno a Git y quedarse con el pre-configurado por defecto que es VIM
		git config --global --unset-all core.editor:
			En una situación alterna donde se tengan más configuraciones
			de varios editores de texto, o por si no funciona el comando anterior usar

	/* Corregir un commit determinado */
		Ir al commit, crear rama "commitCorregido", modificar y aceptar cambios
		Cambiar a la rama a corregir y agregar git rebase commitCorregido
		aceptar y corregir los conflictos, git mergetool,
			VIM: i: para insertar, y :wq guardar/salir
		git rebase --continue y asi sucesivamente

	/* Rescribiendo la historia */
		git rebase -i HEAD~3: Al commit deseado escribir reword y editar el/los commits
		