Download:  https://git-scm.com/download/win

1.-Getting Started:
	1.1__1.6-First-Time Git Setup:
		Configuraciones y origen: git config --list --show-origin
		Identidad: git config --global user.name "Nombre"
		email: git config --global user.email user@example.com
		Editor de texto: git config --global core.editor "editorName"
			emacs, "'C:\Program Files\Sublime Text 3\sublime_text.exe' --wait"
		Nombre de la rama default: git config --global init.defaultBranch main
		Configuraciones: git config --list, git config user.name

	1.7-Getting Help:
		Actualizar Ayuda: Update-Help
		git help <verb>, example: git help config
		git <verb> --help, git add -h
		man git-<verb>, man git-config

2.-Git Basics:
	2.1-Getting a Git Repository:
		Initializing a Repository in an Existing Directory
			Iniciar git en repositorio: git init
			Agregar cambios al commit:
				Archivos por extension: git add *.c
				Por nombre: git add LICENSE
				Todo: git add .
			Confirmar (commit): git commit -m 'Initial project version'

		Cloning an Existing Repositor:
			Clonar: git clone URL,  example: git clone https://github.com/li
			Cambiar nombre del proyecto: git clone https://github.com/li myli

	2.2-Recording Changes to the Repository:
		Checking the Status of Your Files
			Estado de archivos: git status
				Short: git status -s

		Tracking New Files: git add README
		
		Ignoring Files: cat .gitignore
			*.[oa]: terminacion .o|.a
			*~: terminan con tilde
			/node_modules/: Carpeta
				
		Viewing Your Staged and Unstaged Changes
			Comparar: git diff
			Comparar cambios con su último commit: git diff --staged
				OR: git diff --cached

		Committing Your Changes:
			Confirmar cambios: git commit -m "Message"

		Skipping the Staging Area:
			Saltar git add: git commit -a -m "Message"

		Removing Files:
			rm PROJECTS.md
			Ver que esta rastreado(unstaged): git status
			Remover el rastreo(unstaged): git rm PROJECTS.md, Examples: git rm log/\*.log, git rm \*~
				Nota: Si ejecuto "add", forzar eliminación con: -f.
			Mantener archivo local y quitar rastreo git: git rm --cached README

		Moving Files:
			Renombrar un archivo en git: git mv file_from file_to
				this command do this: mv README.md README, git rm README.md, git add README

	2.3-Viewing the Commit History:
			git log
			últimos -n(2, 3, ...): git log -p -2
			Rango: git log --since=2.weeks
			Archivos y lineas modificadas: git log --stat
			En linea: git log --pretty=oneline
			Formato: git log --pretty=format:"%h - %an, %ar : %s"
											a82a6d - Scott Chacon, 6 years ago : Change v
				formatos:
					%H: Commit hash
					%h: Abbreviated commit hash
					%T: Tree hash
					%t: Abbreviated tree hash
					%P: Parent hashes
					%p: Abbreviated parent hashes
					%an: Author name:
					%ae: Author email
					%ad: Author date (format respects the --date=option)
					%ar: Author date, relative
					%cn: Committer name
					%ce: Committer email
					%cd: Committer date
					%cr: Committer date, relative
					%s: Subject
				
	2.4-Undoing Things:
			Editar último commit: git commit --amend -m "nuevo mensaje"
			Agregar cambios en el último commit:
				git commit -m 'Initial commit'
				git add forgotten_file
				git commit --amend

		Unstaging a Staged File:
			git add CONTRIBUTING.md, git reset HEAD CONTRIBUTING.md

		Unmodifying a Modified File:
			git add CONTRIBUTING.md, commit, git checkout -- CONTRIBUTING.md

		Undoing things with git restore: (reset)
			git restore --staged CONTRIBUTING.md

		Unmodifying a Modified File with git restore
			git restore CONTRIBUTING.md

	2.5-Working with Remotes
			Saber el remoto: git remote -v  //-> origin https://github.com/Craken420/AdvancedGit

		Adding Remote Repositories
			git remote add <shortname> <url>: git remote add alias https://github.com/Cra/AdvancedGit2
				now u can use it: git fetch alias
		
		Fetching and Pulling from Your Remotes
			Info del proyecto remoto: git fetch <remote>
		
		Pushing to Your Remotes:
			git push origin master

		Inspecting a Remote:
			Info remota especifica: git remote show origin

		Renaming and Removing Remotes:
			Renombrar: git remote rename pb paul
			Borrar: git remote remove paul

	2.6-Tagging:
		Listing Your Tags: git tag || git tag -l "v1.8.5*"

		Creating Tags:
			Annotated Tags: git tag -a v1.4 -m "my version 1.4", git show v1.4
			Lightweight Tags: git tag v1.4-lw, git show v1.4-lw

		Tagging Later: git tag -a v1.2 9fceb02 //--> (ID Commit), git show v1.2
		
		Sharing Tags:
			git push origin v1.5
			More tha one: git push origin --tags
		
		Deleting Tags:
			local: git tag -d v1.4-lw
			remote: git push origin :refs/tags/v1.4-lw, git push origin --delete <tagname>
		
		Checking out Tags:
			git checkout v2.0.0
			crear rama: git checkout -b version2 v2.0.0

	2.7-Git Aliases:
		git config --global alias.co checkout
		git config --global alias.br branch
		git config --global alias.ci commit
		git config --global alias.st status
		git config --global alias.unstage 'reset HEAD --'
			git unstage fileA = git reset HEAD -- fileA
		git config --global alias.last 'log -1 HEAD'
			git last
		git config --global alias.dtoplog 'reset --hard HEAD^'
		ejecutar un comando externo: git config --global alias.visual '!(nameCommand: gitk)'

3- Git Branching:
	3.1-Branches in a Nutshell:
		Creating a New Branch: git branch testing
		Switching Branches: git checkout testing

	3.2-Basic Branching and Merging:
		git checkout -b hotfix
		git commit -a -m 'Create new footer [issue 53]'
		git checkout master
		git merge hotfix
		Delete branch: git branch -d hotfix
		Basic Merge Conflicts:
			git status
			git mergetool

	3.3-Branch Management:
		Mostrar ramas: git branch
		Ramas con commit: git branch -v
		Mostrar merges: git branch --merged
		Mostrar no merges: git branch --no-merged

		Changing a branch name:
			local: git branch --move oldname newname
			remote: git push --set-upstream origin newname
			listar remotes y local: git branch --all
			eliminar rama remote con nombre erroneo: git push origin --delete oldname
	
	3.5-Remote Branches:
		Pushing: git push origin serverfix

		Tracking Branches: Rama acendente que parte de una rama remota (u = --set-upstream-to)
			Rama remota com local: git checkout --track origin/serverfix
			Rama remota com local diff nombre: git checkout -b sf origin/serverfix
			Cargar cambios en rama existente: git branch -u origin/serverfix
			Listar ramas tracking: git branch -vv
			Actualizar commits remotos y locales (locales)ahead 3, (remoto)behind 1:
				git fetch --all; git branch -vv

		Pulling: consiste en:
			git fetch (indicar remote)-> git merge (combinar)
			git pull: reconoce el tracking Branch

		Deleting Remote Branches:
			git push origin --delete serverfix
	
	3.6-Rebasing
		The Basic Rebase: la diferencia es que el historial de commits queda lineal
			Abortar un rebase: git rebase --abort
			EL merge conserva los commit separados:
								experiment:  c4
											/ \
				master: c0 <- c1 <- c2 <- c3 <- c5
								           |
										master 	   
			git checkout experiment
			git rebase master
								experiment: (c4) temporal
											/
				master: c0 <- c1 <- c2 <- c3 <- [c4]
										   |	  |-> experiment									
										master 	
			git checkout master
			git merge experiment
											|->experiment 	
					c0 <- c1 <- c2 <- c3 <- c4
											|->master 
			Pasar lo de cliente al main omitiendo al servidor en caso de mas pruebas:
									  |-> master
					c0 <- c1 <- c4 <- c5
							     \ 
						server	  c2 <- c3 <- c8
							       \
						client      c6 <- c7
				In branch 'client': git rebase --onto master server client
								       | master
					c0 <- c1 <- c4 <- c5 <- [c6' <- c7']
							     \                  |-> client
						server	  c2 <- c3 <- c8
							       \
							       (c6 <- c7) temporal
									
				git checkout master
				git merge client
									                | master
					c0 <- c1 <- c4 <- c5 <- c6' <- c7'
							     \                  |-> client
						server	  c2 <- c3 <- c8
				In branch 'server': git rebase master server
										          | master
					c0 <- c1 <- c4 <- c5 <- c6 <- c7 <- [c2' <- c3' <- c8']
							     \                |-> client		    |-> server
								  (c2 <- c3 <- c8) temporal
				git checkout master
				git merge server
				git branch -d client
				git branch -d server								   |-> Master
					c0 <- c1 <- c4 <- c5 <- c6' <- c7' <- c2' <- c3' <- c8'
				git push --force :  Reescribe el historial en el servidor

			The Perils of Rebasing
				Server:
						c1 <- master

				clone Local y hago cambios:
						c1 <- equipo1/master
						 \_ c2 <- c3 <- master

					equipo1/master modifica, fusiona y envia al Server:
							   c5
							_/	 ^\       
						c1 <-  c4 <- c6 <- master

					fetch it and merge Local:
						       c5
							_/	 ^\       
						c1 <- c4 <- c6 <- equipo1/master
							\_ c2 <- c3 _\ Merge:c7  <- master

						rebase an push --force Server:
								    c5	<- [c4']
								_/	   ^\       
							c1 <- (c4 <- c6) temporal

						fetch del server al Local:
								    c5	 <------ c4' \ equipo1/master
								_/	   ^\             \
							c1 <- c4 <- c6             \
							  \_ c2 <- c3 _\ Merge:c7 <- c8 <- master
			Rebase When You Rebase
				git rebase teamone/master
					Determine qué trabajo es exclusivo de nuestro salvado: (C2, C3, C4, C6, C7)
					Determinar cuáles no son merge commits (C2, C3, C4)
					Determine cuáles no se han reescrito en la rama de destino  ( C2 y C3, Ya que C4 es el mismo que C4')
				Local:
								|-> equipo1/master
					c1 <- c5 <- c4' <- c2' <- c3' <- master
